{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f1dcc54",
   "metadata": {},
   "source": [
    "[1. 509. Fibonacci Number](https://leetcode.com/problems/fibonacci-number/submissions/934642217/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c4a1dea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "    def fib(self, n: int) -> int:\n",
    "        if n == 0:\n",
    "            return 0\n",
    "        if n == 1 or n == 2:\n",
    "            return 1\n",
    "        return self.fib(n - 1) + self.fib(n - 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e2d06ba",
   "metadata": {},
   "source": [
    "[2.  Power of Three](https://leetcode.com/problems/power-of-three/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b2993e71",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "    def isPowerOfThree(self, n: int) -> bool:\n",
    "        if n == 1:\n",
    "            return True\n",
    "        elif n % 3 != 0 or n <= 0:\n",
    "            return False\n",
    "        else:\n",
    "            return self.isPowerOfThree(n//3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca4f5cb1",
   "metadata": {},
   "source": [
    "[3. Reverse String](https://leetcode.com/problems/reverse-string/submissions/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "203df480",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "    def reverseString(self, s: List[str]) -> None:\n",
    "        i = 0\n",
    "        j = len(s)-1\n",
    "        self.reverse(s,i,j)\n",
    "        return s\n",
    "        \n",
    "\n",
    "    def reverse(self, s, i, j):\n",
    "        if j < i:\n",
    "            return\n",
    "        s[i], s[len(s)-1-i] = s[len(s)-1-i], s[i]\n",
    "        self.reverse(s,i+1,j-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1261bf",
   "metadata": {},
   "source": [
    "[4. Binary Search](https://leetcode.com/problems/binary-search/submissions/935439044/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "95aafc2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "    def search(self, nums, target, inx=0) -> int:\n",
    "        if target >= nums[0] and target <= nums[-1]: \n",
    "            return self.binary_search_recursive(nums, target, 0, len(nums))\n",
    "        return -1\n",
    "\n",
    "\n",
    "\n",
    "    def binary_search_recursive(self, nums, target, left, right):\n",
    "        if left > right:\n",
    "            return -1\n",
    "\n",
    "        mid = (left + right) // 2\n",
    "\n",
    "        if nums[mid] == target:\n",
    "            return mid\n",
    "\n",
    "        elif nums[mid] < target:\n",
    "            return self.binary_search_recursive(nums, target, mid + 1, right)\n",
    "\n",
    "        else:\n",
    "            return self.binary_search_recursive(nums, target, left, mid - 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39eef4e7",
   "metadata": {},
   "source": [
    "5. 35. Search Insert Position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40f7a2dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a9f40890",
   "metadata": {},
   "source": [
    "6. 278. First Bad Version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd8be7c1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2c513583",
   "metadata": {},
   "source": [
    "7. Peak Index in a Mountain Array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d6f6736",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "fa026edc",
   "metadata": {},
   "source": [
    "8. Find Peak Element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93066757",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "64c0a044",
   "metadata": {},
   "source": [
    "9. Search a 2D Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0d4de4d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "978a2969",
   "metadata": {},
   "source": [
    "10. Koko Eating Bananas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c47624a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
